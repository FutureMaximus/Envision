#version 430 core
// TODO: Make this dynamic based on the aspect ratio of the window where we recompile the shader
layout(local_size_x = 16, local_size_y = 9, local_size_z = 4) in;

struct PointLight
{
	vec3  position;
    float maxRange;
};

struct LightGrid
{
    uint offset;
    uint count;
};

struct VolumeTileAABB{
    vec4 minPoint;
    vec4 maxPoint;
};

layout (std430, binding = 1) buffer clusterAABB
{
    VolumeTileAABB cluster[];
};

// The screen to view data.
layout (std430, binding = 2) buffer screenToView
{
    mat4 inverseProjection;
    uvec4 tileSizes;
    uvec2 screenDimensions;
};

// The point light data.
layout (std430, binding = 3) buffer lightSSBO
{
    PointLight pointLight[];
};

// The global light index list.
layout (std430, binding = 4) buffer lightIndexSSBO
{
    uint globalLightIndexList[];
};

// The light grid.
layout (std430, binding = 5) buffer lightGridSSBO
{
    LightGrid lightGrid[];
};

// The global index count.
layout (std430, binding = 6) buffer globalIndexCountSSBO
{
    uint globalIndexCount;
};

// All the lights being evaluated they are stored in shared memory.
shared PointLight sharedLights[16*9*4];

layout (std140, binding = 0) uniform ProjView
{
	mat4 projection;
	mat4 view;
	vec3 viewPos;
};

bool testSphereAABB(uint light, uint tile);
float squareDistPointAABB(vec3 point, uint tile);

void main()
{
    globalIndexCount = 0;
    uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
    // Determine the light count and the number of batches.
    uint lightCount = pointLight.length();
    uint numBatches = (lightCount + threadCount -1) / threadCount;

    uint tileIndex = gl_LocalInvocationIndex + gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z * gl_WorkGroupID.z;

    uint visibleLightCount = 0;
    uint visibleLightIndices[100];

    for (uint batch = 0; batch < numBatches; batch++)
    {
        uint lightIndex = batch * threadCount + gl_LocalInvocationIndex;

        // Prevent overflow by clamping to last light which is always null
        lightIndex = min(lightIndex, lightCount);

        // Load the light into shared memory.
        sharedLights[gl_LocalInvocationIndex] = pointLight[lightIndex];
        barrier(); // Sync all threads in the work group.

        // Iterating within the current batch of lights.
        for (uint light = 0; light < threadCount; light++)
        {
            if (testSphereAABB(lightIndex, tileIndex))
			{
				visibleLightIndices[visibleLightCount] = batch * threadCount + light;
				visibleLightCount++;
			}
        }
    }

    // We want all thread groups to have completed the light tests before continuing
    barrier();

    uint offset = atomicAdd(globalIndexCount, visibleLightCount);

    for(uint i = 0; i < visibleLightCount; ++i){
        globalLightIndexList[offset + i] = visibleLightIndices[i];
    }

    lightGrid[tileIndex].offset = offset;
    lightGrid[tileIndex].count = visibleLightCount;
}

bool testSphereAABB(uint light, uint tile)
{
    float radius = sharedLights[light].maxRange;
    vec4 lightPos = vec4(sharedLights[light].position, 1.0);
    vec3  center  = vec3(view * lightPos);
    float squaredDistance = squareDistPointAABB(center, tile);

    return squaredDistance <= (radius * radius);
}

float squareDistPointAABB(vec3 point, uint tile)
{
    float sqDist = 0.0;
    VolumeTileAABB currentCell = cluster[tile];
    cluster[tile].maxPoint[3] = tile;
    for(int i = 0; i < 3; ++i){
        float v = point[i];
        if(v < currentCell.minPoint[i]){
            sqDist += (currentCell.minPoint[i] - v) * (currentCell.minPoint[i] - v);
        }
        if(v > currentCell.maxPoint[i]){
            sqDist += (v - currentCell.maxPoint[i]) * (v - currentCell.maxPoint[i]);
        }
    }

    return sqDist;
}